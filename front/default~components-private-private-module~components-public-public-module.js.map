{"version":3,"sources":["./node_modules/angular-reactive-validation/__ivy_ngcc__/fesm2015/angular-reactive-validation.js","./src/app/components/shared/footer/footer.component.ts","./src/app/components/shared/footer/footer.component.html","./src/app/core/validator/validadores.ts","./src/app/components/shared/input-invalido/input-invalido.component.ts","./src/app/components/shared/input-invalido/input-invalido.component.html","./src/app/components/shared/shared.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4I;AAC7F;AACgE;AAC3E;;AAEI;AACC;AACC;;AAE1C,6DAA6D;AAC7D,IAAI,4DAAqB;AACzB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,kEAAkE;AAClE,IAAI,4DAAqB;AACzB,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,IAAI,uDAAgB;AACpB,IAAI,+DAAwB;AAC5B,CAAC;AACD,8DAA8D;AAC9D,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD,mBAAmB,2DAAoB;AACvC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD;AACA;AACA;AACA;AACA,0DAA0D,KAAK;AAC/D,oEAAoE,oCAAoC;AACxG;AACA,iCAAiC,0DAAW;AAC5C,kDAAkD,KAAK;AACvD,mEAAmE,oCAAoC;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,8CAA8C,+DAAwB,CAAC,+DAAuB,MAAM;AACtL,kCAAkC,+DAAwB,EAAE,qFAAqF,yBAAyB,sIAAsI;AAChT,QAAQ,6DAAsB;AAC9B,QAAQ,wDAAiB;AACzB,KAAK;AACL,QAAQ,wDAAiB;AACzB,KAAK,EAAE,eAAe,oDAAW,qBAAqB;AACtD;AACA,KAAK,OAAO,+DAAgB,gBAAgB,OAAO,sDAAQ,EAAE;AAC7D;AACA;AACA,WAAW,OAAO,mDAAK,EAAE;AACzB,WAAW,OAAO,mDAAK,EAAE;AACzB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,+BAA+B,+DAAiB;AAChD,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,+DAAuB;AAC7D,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iCAAiC,+DAAwB,CAAC,iEAAyB,GAAG;AAC9I,qBAAqB,+DAAwB,EAAE,8DAA8D;AAC7G;AACA,KAAK,OAAO,iEAAkB;AAC9B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,iEAAyB,EAAE,EAAE,EAAE,QAAQ,EAAE;;AAE/E,uDAAuD,4DAAc;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,iDAAY;AACpE,oDAAoD,iDAAY;AAChE;AACA,6CAA6C,iDAAY;AACzD,0CAA0C;AAC1C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,iDAAY;AAChE;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8HAA8H;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kHAAkH,cAAc;AAChI;AACA;AACA;AACA,+EAA+E,cAAc;AAC7F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gGAAgG,UAAU;AAC1G,6BAA6B,8BAA8B;AAC3D;AACA;AACA;AACA,oFAAoF,+CAA+C,+DAAwB,CAAC,+DAAuB,MAAM,+DAAwB,oBAAoB,+DAAwB,iDAAiD;AAC9S,mCAAmC,+DAAwB,EAAE,sKAAsK;AACnO,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,aAAa,yLAAyL;AACxN,QAAQ,6DAAsB;AAC9B,QAAQ,wDAAiB;AACzB,KAAK;AACL,QAAQ,wDAAiB;AACzB,KAAK,EAAE,eAAe,oDAAW,EAAE,uDAAc,qBAAqB;AACtE;AACA,KAAK,OAAO,+DAAgB,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAChE,KAAK,oCAAoC,OAAO,sDAAQ,EAAE,GAAG;AAC7D,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,uDAAuD;AAC7H;AACA;AACA,yBAAyB,OAAO,6DAAe,uCAAuC;AACtF,WAAW,OAAO,mDAAK,EAAE;AACzB;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA,qJAAqJ,SAAS;AAC9J,+BAA+B,+DAAiB;AAChD,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,+DAAuB;AAC7D,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa,GAAG,GAAG;AACnB,sBAAsB,sDAAQ;AAC9B,aAAa;AACb,sBAAsB,oDAAM;AAC5B;AACA,aAAa,GAAG,EAAE,EAAE,GAAG;AACvB,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,6DAAe;AACjC;AACA,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gCAAgC,8DAAuB,EAAE,iCAAiC;AAC1F,gCAAgC,8DAAuB,EAAE,wDAAwD,8CAA8C,EAAE;AACjK,YAAY,4DAAY;AACxB,YAAY;AACZ,cAAc,oDAAoD,gEAAyB,4BAA4B,4BAA4B,iFAAiF,EAAE,wBAAwB,SAAS,4DAAY,EAAE,EAAE,wBAAwB,iFAAiF,EAAE,EAAE,EAAE,EAAE;AACxY,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA,oBAAoB,4DAAY;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yDAAY,uBAAuB,yDAAY;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,yDAAY;AACvF,2EAA2E,yDAAY;AACvF,iFAAiF,yDAAY;AAC7F,iFAAiF,yDAAY;AAC7F,+EAA+E,yDAAY;AAC3F,4EAA4E,yDAAY;AACxF,gFAAgF,yDAAY;AAC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","file":"default~components-private-private-module~components-public-public-module.js","sourcesContent":["import { Component, ViewEncapsulation, Optional, Input, Directive, InjectionToken, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormControl, ControlContainer, FormGroupDirective, Validators as Validators$1 } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/forms';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction ValidationMessageComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n} }\nconst _c0 = [\"*\"];\nfunction ValidationMessagesComponent_div_0_p_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"p\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const message_r2 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(message_r2);\n} }\nfunction ValidationMessagesComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(2, ValidationMessagesComponent_div_0_p_2_Template, 2, 1, \"p\", 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵprojection(3);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.getErrorMessages());\n} }\nfunction getFormControlFromContainer(name, controlContainer) {\r\n    if (controlContainer) {\r\n        const control = controlContainer.control.controls[name];\r\n        if (!control) {\r\n            throw new Error(`There is no control named '${name}'` +\r\n                (getPath(controlContainer).length > 0 ? ` within '${getPath(controlContainer).join('.')}'` : '') + '.');\r\n        }\r\n        if (!(control instanceof FormControl)) {\r\n            throw new Error(`The control named '${name}' ` +\r\n                (getPath(controlContainer).length > 0 ? `within '${getPath(controlContainer).join('.')}' ` : '') +\r\n                `is not a FormControl. Maybe you accidentally referenced a FormGroup or FormArray?`);\r\n        }\r\n        return control;\r\n    }\r\n    else {\r\n        throw new Error(`You can't pass a string to arv-validation-messages's for attribute, when the ` +\r\n            `arv-validation-messages element is not a child of an element with a formGroupName or formGroup declaration.`);\r\n    }\r\n}\r\nfunction isControlContainerVoidOrInitialized(controlContainer) {\r\n    return !!(!controlContainer || controlContainer.form ||\r\n        (controlContainer.formDirective && controlContainer.formDirective.form));\r\n}\r\nfunction getPath(controlContainer) {\r\n    return controlContainer.path || [];\r\n}\n\n/**\r\n * The ValidationMessageComponent lets the developer specify a custom visual style and custom error message\r\n * for edge-cases where the standard style or message capabilities do not suffice.\r\n *\r\n * TODO: Trigger revalidation by parent whenever [for] changes.\r\n */\r\nclass ValidationMessageComponent {\r\n    constructor(controlContainer) {\r\n        this.controlContainer = controlContainer;\r\n        this.initializeForOnInit = () => { };\r\n    }\r\n    set for(control) {\r\n        if (!isControlContainerVoidOrInitialized(this.controlContainer)) {\r\n            this.initializeForOnInit = () => this.for = control;\r\n            return;\r\n        }\r\n        this._for = typeof control === 'string' ? getFormControlFromContainer(control, this.controlContainer) : control;\r\n    }\r\n    get for() {\r\n        return this._for;\r\n    }\r\n    /**\r\n     * The ValidationErrors object that contains contextual information about the error, which can be used for\r\n     * displaying, e.g. the minimum length within the error message.\r\n     */\r\n    get context() {\r\n        return this._context;\r\n    }\r\n    ngOnInit() {\r\n        this.initializeForOnInit();\r\n    }\r\n    canHandle(error) {\r\n        return (!this.for || error.control === this.for) && error.key === this.key;\r\n    }\r\n    show(error) {\r\n        this._context = error.errorObject;\r\n    }\r\n    reset() {\r\n        this._context = undefined;\r\n    }\r\n}\nValidationMessageComponent.ɵfac = function ValidationMessageComponent_Factory(t) { return new (t || ValidationMessageComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ControlContainer, 8)); };\nValidationMessageComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ValidationMessageComponent, selectors: [[\"arv-validation-message\"]], inputs: { for: \"for\", key: \"key\" }, ngContentSelectors: _c0, decls: 1, vars: 1, consts: [[4, \"ngIf\"]], template: function ValidationMessageComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ValidationMessageComponent_div_0_Template, 2, 0, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.context);\n    } }, directives: [ɵngcc2.NgIf], encapsulation: 2 });\r\nValidationMessageComponent.ctorParameters = () => [\r\n    { type: ControlContainer, decorators: [{ type: Optional }] }\r\n];\r\nValidationMessageComponent.propDecorators = {\r\n    for: [{ type: Input }],\r\n    key: [{ type: Input }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidationMessageComponent, [{\n        type: Component,\n        args: [{\n                selector: 'arv-validation-message',\n                template: \"<div *ngIf=\\\"context\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc1.ControlContainer, decorators: [{\n                type: Optional\n            }] }]; }, { for: [{\n            type: Input\n        }], key: [{\n            type: Input\n        }] }); })();\n\nclass ValidationError {\r\n    constructor(control, key, errorObject) {\r\n        this.control = control;\r\n        this.key = key;\r\n        this.errorObject = errorObject;\r\n    }\r\n    static fromFirstError(control) {\r\n        if (!control.errors) {\r\n            return undefined;\r\n        }\r\n        return new ValidationError(control, Object.keys(control.errors)[0], control.errors[Object.keys(control.errors)[0]]);\r\n    }\r\n    hasMessage() {\r\n        return !!this.getMessage();\r\n    }\r\n    getMessage() {\r\n        return this.errorObject.message;\r\n    }\r\n}\n\n/**\r\n * Encapsulates properties and events of the form and makes them available for child components.\r\n */\r\nclass FormDirective {\r\n    constructor(formGroupDirective) {\r\n        this.submitted = formGroupDirective.ngSubmit.asObservable();\r\n    }\r\n}\nFormDirective.ɵfac = function FormDirective_Factory(t) { return new (t || FormDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormGroupDirective)); };\nFormDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FormDirective, selectors: [[\"form\", \"formGroup\", \"\"]] });\r\nFormDirective.ctorParameters = () => [\r\n    { type: FormGroupDirective }\r\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormDirective, [{\n        type: Directive,\n        args: [{\n                // tslint:disable-next-line:directive-selector\n                selector: 'form[formGroup]'\n            }]\n    }], function () { return [{ type: ɵngcc1.FormGroupDirective }]; }, null); })();\n\nconst ReactiveValidationModuleConfigurationToken = new InjectionToken('ReactiveValidationModuleConfiguration');\n\n/**\r\n * Given a control, returns a string representation of the property path to\r\n * this control. Thus, for a FormControl 'firstName', that is part of a\r\n * FormGroup named 'name', this function will return: 'name.firstName'.\r\n *\r\n * Note that FormArray indexes are also put in the path, e.g.: 'person.0.name.firstName'.\r\n */\r\nfunction getControlPath(control) {\r\n    const parentControl = control.parent;\r\n    if (parentControl) {\r\n        let path = getControlPath(parentControl);\r\n        if (path) {\r\n            path += '.';\r\n        }\r\n        return path + Object.keys(parentControl.controls).find(key => {\r\n            const controls = parentControl.controls;\r\n            if (Array.isArray(controls)) {\r\n                return controls[Number(key)] === control;\r\n            }\r\n            else {\r\n                return controls[key] === control;\r\n            }\r\n        });\r\n    }\r\n    return '';\r\n}\n\n/**\r\n * The ValidationMessagesComponent shows validation messages for one to many FormControls. It either shows\r\n * messages specified within the reactive form model, or shows custom messages declared using the\r\n * ValidationMessageComponent.\r\n */\r\nclass ValidationMessagesComponent {\r\n    constructor(controlContainer, formSubmitDirective, configuration) {\r\n        this.controlContainer = controlContainer;\r\n        this.configuration = configuration;\r\n        this._for = [];\r\n        this.messageComponentsChangesSubscription = new Subscription();\r\n        this.controlStatusChangesSubscription = new Subscription();\r\n        this.formSubmitted = undefined;\r\n        this.formSubmittedSubscription = new Subscription();\r\n        this.initializeForOnInit = () => { };\r\n        if (formSubmitDirective) {\r\n            this.formSubmitted = false;\r\n            this.formSubmittedSubscription.add(formSubmitDirective.submitted.subscribe(() => {\r\n                this.formSubmitted = true;\r\n            }));\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this.initializeForOnInit();\r\n    }\r\n    set for(controls) {\r\n        if (!isControlContainerVoidOrInitialized(this.controlContainer)) {\r\n            this.initializeForOnInit = () => this.for = controls;\r\n            return;\r\n        }\r\n        if (!Array.isArray(controls)) {\r\n            controls = controls !== undefined ? [controls] : [];\r\n        }\r\n        if (controls.length === 0) {\r\n            throw new Error(`arv-validation-messages doesn't allow declaring an empty array as input to the 'for' attribute.`);\r\n        }\r\n        this._for = controls.map(control => typeof control === 'string' ?\r\n            getFormControlFromContainer(control, this.controlContainer) : control);\r\n        this.validateChildren();\r\n        this.controlStatusChangesSubscription.unsubscribe();\r\n        this.controlStatusChangesSubscription = new Subscription();\r\n        this._for.forEach(control => {\r\n            this.controlStatusChangesSubscription.add(control.statusChanges.subscribe(() => {\r\n                this.handleControlStatusChange(control);\r\n            }));\r\n        });\r\n    }\r\n    ngAfterContentInit() {\r\n        this.messageComponentsChangesSubscription.add(this.messageComponents.changes.subscribe(this.validateChildren));\r\n        this.validateChildren();\r\n        this._for.forEach(control => {\r\n            this.handleControlStatusChange(control);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.messageComponentsChangesSubscription.unsubscribe();\r\n        this.formSubmittedSubscription.unsubscribe();\r\n        this.controlStatusChangesSubscription.unsubscribe();\r\n    }\r\n    isValid() {\r\n        return this.getFirstErrorPerControl().length === 0;\r\n    }\r\n    getErrorMessages() {\r\n        return this.getFirstErrorPerControl().filter(error => error.hasMessage())\r\n            .map(error => error.getMessage());\r\n    }\r\n    getFirstErrorPerControl() {\r\n        return this._for.filter(control => this.configuration && this.configuration.displayValidationMessageWhen ?\r\n            this.configuration.displayValidationMessageWhen(control, this.formSubmitted) : control.touched || this.formSubmitted).map(ValidationError.fromFirstError).filter(value => value !== undefined);\r\n    }\r\n    /**\r\n     * Validates that the child ValidationMessageComponents declare what FormControl they specify a message for (when needed); and\r\n     * that the declared FormControl is actually part of the parent ValidationMessagesComponent 'for' collection (when specified).\r\n     */\r\n    validateChildren() {\r\n        if (!this.messageComponents) {\r\n            return;\r\n        }\r\n        this.messageComponents.forEach(component => {\r\n            if (this._for.length > 1 && component.for === undefined) {\r\n                throw new Error(`Specify the FormControl for which the arv-validation-message element with key '${component.key}' ` +\r\n                    `should show messages.`);\r\n            }\r\n            if (component.for && this._for.indexOf(component.for) === -1) {\r\n                throw new Error(`A arv-validation-messages element with key '${component.key}' attempts to show messages ` +\r\n                    `for a FormControl that is not declared in the parent arv-validation-messages element.`);\r\n            }\r\n        });\r\n    }\r\n    handleControlStatusChange(control) {\r\n        if (!this.messageComponents) {\r\n            return;\r\n        }\r\n        this.messageComponents.filter(component => component.for === control || component.for === undefined)\r\n            .forEach(component => component.reset());\r\n        const error = ValidationError.fromFirstError(control);\r\n        if (!error || error.hasMessage()) {\r\n            return;\r\n        }\r\n        const messageComponent = this.messageComponents.find(component => {\r\n            return component.canHandle(error);\r\n        });\r\n        if (messageComponent) {\r\n            messageComponent.show(error);\r\n        }\r\n        else {\r\n            throw new Error(`There is no suitable arv-validation-message element to show the '${error.key}' ` +\r\n                `error of '${getControlPath(error.control)}'`);\r\n        }\r\n    }\r\n}\nValidationMessagesComponent.ɵfac = function ValidationMessagesComponent_Factory(t) { return new (t || ValidationMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ControlContainer, 8), ɵngcc0.ɵɵdirectiveInject(FormDirective, 8), ɵngcc0.ɵɵdirectiveInject(ReactiveValidationModuleConfigurationToken, 8)); };\nValidationMessagesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ValidationMessagesComponent, selectors: [[\"arv-validation-messages\"]], contentQueries: function ValidationMessagesComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ValidationMessageComponent, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.messageComponents = _t);\n    } }, inputs: { for: \"for\" }, ngContentSelectors: _c0, decls: 1, vars: 1, consts: [[4, \"ngIf\"], [1, \"invalid-feedback\"], [4, \"ngFor\", \"ngForOf\"]], template: function ValidationMessagesComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ValidationMessagesComponent_div_0_Template, 4, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isValid());\n    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf], encapsulation: 2 });\r\nValidationMessagesComponent.ctorParameters = () => [\r\n    { type: ControlContainer, decorators: [{ type: Optional }] },\r\n    { type: FormDirective, decorators: [{ type: Optional }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ReactiveValidationModuleConfigurationToken,] }] }\r\n];\r\nValidationMessagesComponent.propDecorators = {\r\n    messageComponents: [{ type: ContentChildren, args: [ValidationMessageComponent,] }],\r\n    for: [{ type: Input }]\r\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValidationMessagesComponent, [{\n        type: Component,\n        args: [{\n                selector: 'arv-validation-messages',\n                template: \"<div *ngIf=\\\"!isValid()\\\">\\r\\n  <div class=\\\"invalid-feedback\\\">\\r\\n    <p *ngFor=\\\"let message of getErrorMessages()\\\">{{message}}</p>\\r\\n  </div>\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc1.ControlContainer, decorators: [{\n                type: Optional\n            }] }, { type: FormDirective, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ReactiveValidationModuleConfigurationToken]\n            }] }]; }, { for: [{\n            type: Input\n        }], messageComponents: [{\n            type: ContentChildren,\n            args: [ValidationMessageComponent]\n        }] }); })();\n\nclass ReactiveValidationModule {\r\n    static forRoot(configuration) {\r\n        return {\r\n            ngModule: ReactiveValidationModule,\r\n            providers: [{\r\n                    provide: ReactiveValidationModuleConfigurationToken, useValue: configuration\r\n                }]\r\n        };\r\n    }\r\n}\nReactiveValidationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ReactiveValidationModule });\nReactiveValidationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ReactiveValidationModule_Factory(t) { return new (t || ReactiveValidationModule)(); }, imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReactiveValidationModule, { declarations: function () { return [ValidationMessagesComponent, ValidationMessageComponent, FormDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ValidationMessagesComponent, ValidationMessageComponent, FormDirective]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReactiveValidationModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule\n                ],\n                declarations: [\n                    ValidationMessagesComponent,\n                    ValidationMessageComponent,\n                    FormDirective\n                ],\n                exports: [\n                    ValidationMessagesComponent,\n                    ValidationMessageComponent,\n                    FormDirective\n                ]\n            }]\n    }], null, null); })();\n\n/**\r\n * @dynamic\r\n */\r\nclass ValidatorDeclaration {\r\n    /**\r\n     * Wraps your own validator functions for use with the angular-reactive-validation library.\r\n     * @param validatorFn A function you want to wrap which can validate a control.\r\n     * @param resultKey The error key used for indicating an error result as returned from the ValidatorFn.\r\n     * @param message The message to display when a validation error occurs. A function can also be passed to determine\r\n     * the message at a later time.\r\n     */\r\n    static wrapNoArgumentValidator(validatorFn, resultKey) {\r\n        return function (message) {\r\n            return function (control) {\r\n                return ValidatorDeclaration.validateAndSetMessageIfInvalid(control, () => validatorFn, resultKey, message);\r\n            };\r\n        };\r\n    }\r\n    /**\r\n     * Wraps your own validator functions for use with the angular-reactive-validation library.\r\n     * @param validatorFactoryFn A function which accepts a single argument and returns a ValidatorFn.\r\n     * @param resultKey The error key used for indicating an error result as returned from the ValidatorFn.\r\n     */\r\n    static wrapSingleArgumentValidator(validatorFactoryFn, resultKey) {\r\n        return function (arg1, message) {\r\n            return function (control) {\r\n                const unwrappedArg1 = ValidatorDeclaration.unwrapArgument(arg1);\r\n                return ValidatorDeclaration.validateAndSetMessageIfInvalid(control, validatorFactoryFn, resultKey, message, unwrappedArg1);\r\n            };\r\n        };\r\n    }\r\n    /**\r\n     * Wraps your own validator functions for use with the angular-reactive-validation library.\r\n     * @param validatorFactoryFn A function which accepts two arguments and returns a ValidatorFn.\r\n     * @param resultKey The error key used for indicating an error result as returned from the ValidatorFn.\r\n     */\r\n    static wrapTwoArgumentValidator(validatorFactoryFn, resultKey) {\r\n        return function (arg1, arg2, message) {\r\n            return function (control) {\r\n                const unwrappedArg1 = ValidatorDeclaration.unwrapArgument(arg1);\r\n                const unwrappedArg2 = ValidatorDeclaration.unwrapArgument(arg2);\r\n                return ValidatorDeclaration.validateAndSetMessageIfInvalid(control, validatorFactoryFn, resultKey, message, unwrappedArg1, unwrappedArg2);\r\n            };\r\n        };\r\n    }\r\n    static unwrapArgument(arg) {\r\n        if (arg instanceof Function) {\r\n            arg = arg();\r\n        }\r\n        return arg;\r\n    }\r\n    static validateAndSetMessageIfInvalid(control, validatorFactoryFn, resultKey, message, ...args) {\r\n        const validationResult = ValidatorDeclaration.validate(control, validatorFactoryFn, ...args);\r\n        ValidatorDeclaration.setMessageIfInvalid(control, resultKey, validationResult, message, ...args);\r\n        return validationResult;\r\n    }\r\n    static validate(control, validatorFactoryFn, ...args) {\r\n        const wrappedValidatorFn = validatorFactoryFn(...args);\r\n        return wrappedValidatorFn(control);\r\n    }\r\n    static setMessageIfInvalid(control, resultKey, validationResult, message, ...args) {\r\n        if (message) {\r\n            if (validationResult && validationResult[resultKey]) {\r\n                if (typeof message === 'function') {\r\n                    message = message(...args);\r\n                }\r\n                // Not all validators set an object. Often they'll simply set a property to true.\r\n                // Here, we replace any non-object (or array) to be an object on which we can set a message.\r\n                if (!ValidatorDeclaration.isObject(validationResult[resultKey])) {\r\n                    validationResult[resultKey] = {};\r\n                }\r\n                validationResult[resultKey]['message'] = message;\r\n            }\r\n        }\r\n    }\r\n    static isObject(arg) {\r\n        return arg !== null && typeof arg === 'object' && !Array.isArray(arg);\r\n    }\r\n}\n\n/**\r\n * Provides a set of validators used by form controls.\r\n *\r\n * Code comments have been copied from the Angular source code.\r\n */\r\nclass Validators {\r\n    static compose(validators) {\r\n        return validators === null ? Validators$1.compose(validators) : Validators$1.compose(validators);\r\n    }\r\n    static min(min, message) {\r\n        return Validators.minValidator(min, message);\r\n    }\r\n    static max(max, message) {\r\n        return Validators.maxValidator(max, message);\r\n    }\r\n    static minLength(minLength, message) {\r\n        return Validators.minLengthValidator(minLength, message);\r\n    }\r\n    static maxLength(maxLength, message) {\r\n        return Validators.maxLengthValidator(maxLength, message);\r\n    }\r\n    static pattern(pattern, message) {\r\n        return Validators.patternValidator(pattern, message);\r\n    }\r\n    static required(message) {\r\n        return Validators.requiredValidator(message);\r\n    }\r\n    static requiredTrue(message) {\r\n        return Validators.requiredTrueValidator(message);\r\n    }\r\n    static email(message) {\r\n        return Validators.emailValidator(message);\r\n    }\r\n}\r\nValidators.minValidator = ValidatorDeclaration.wrapSingleArgumentValidator(Validators$1.min, 'min');\r\nValidators.maxValidator = ValidatorDeclaration.wrapSingleArgumentValidator(Validators$1.max, 'max');\r\nValidators.minLengthValidator = ValidatorDeclaration.wrapSingleArgumentValidator(Validators$1.minLength, 'minlength');\r\nValidators.maxLengthValidator = ValidatorDeclaration.wrapSingleArgumentValidator(Validators$1.maxLength, 'maxlength');\r\nValidators.patternValidator = ValidatorDeclaration.wrapSingleArgumentValidator(Validators$1.pattern, 'pattern');\r\nValidators.requiredValidator = ValidatorDeclaration.wrapNoArgumentValidator(Validators$1.required, 'required');\r\nValidators.requiredTrueValidator = ValidatorDeclaration.wrapNoArgumentValidator(Validators$1.requiredTrue, 'required');\r\nValidators.emailValidator = ValidatorDeclaration.wrapNoArgumentValidator(Validators$1.email, 'email');\r\n/**\r\n * No-op validator.\r\n */\r\nValidators.nullValidator = Validators$1.nullValidator;\r\nValidators.composeAsync = Validators$1.composeAsync;\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ReactiveValidationModule, ValidatorDeclaration, Validators, ValidationMessagesComponent as ɵa, ValidationMessageComponent as ɵb, ReactiveValidationModuleConfigurationToken as ɵc, FormDirective as ɵd };\n\n//# sourceMappingURL=angular-reactive-validation.js.map","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<footer>\n  <div class=\"pie p-d-flex p-flex-column p-flex-md-row\">\n    <div class=\"p-mb-2 p-mr-2\" >\n      <img src=\"assets/images/sistemasUNL_blanco.svg\" style=\"width: 100%; height: 100%;  \">\n    </div>\n    <div class=\"p-mb-2 p-grid \">\n      <span class=\"p-mt-3 p-col-12\">\n        <i class=\"pi pi-map-marker\"></i>\n        Ciudad Universitaria 'Ing. Guillermo Falconi Espinosa\n      </span>\n      <span class=\" p-col-12\">\n        CARRERA DE INGENIERÍA EN SISTEMAS (UNL)\n      </span>\n      <span class=\"p-mb-1 p-col-12\">\n        <i class=\"pi pi-phone\"></i>\n        Telefono: 07-2546384 / 07-2547252(ext. 154-155)\n      </span>\n      <span class=\"p-mb-3 p-mt-3 p-col-12 p-text-center\">\n        <i class=\"pi pi-globe\"></i>\n        2021 todos los derechos reservados\n      </span>\n    </div>\n\n\n    </div>\n\n</footer>\n","import { nullSafeIsEquivalent } from \"@angular/compiler/src/output/output_ast\";\r\nimport { AbstractControl, FormArray, FormControl, FormGroup, ValidationErrors } from \"@angular/forms\";\r\nimport { ValidatorDeclaration } from \"angular-reactive-validation\";\r\n\r\nexport const marcarCamposVacios = ( formulario : FormGroup )=>{\r\n  Object.keys(formulario.controls).forEach(field=>{\r\n      const control = formulario.get(field);\r\n      if(control instanceof FormControl){\r\n          control.markAsTouched();\r\n          control.markAsDirty();\r\n      } else if (control instanceof FormGroup){\r\n          marcarCamposVacios(control);\r\n      } else if (control instanceof FormArray){\r\n          control.getRawValue().forEach( (value, i) => {\r\n              control.at(i) instanceof FormGroup && marcarCamposVacios( control.at(i) as FormGroup )\r\n          } )\r\n      }\r\n  })\r\n}\r\n\r\n\r\nexport const validarCampoMayor = ValidatorDeclaration.wrapTwoArgumentValidator((inicio: AbstractControl, tipo : string) => {\r\n  const valorInicio = inicio.value;\r\n\r\n  return function(control: AbstractControl): ValidationErrors {\r\n    if(!valorInicio){\r\n      // inicio.markAsTouched();\r\n      // inicio.markAsDirty();\r\n      return null;\r\n    }\r\n\r\n    if(!control.value){\r\n      return null;\r\n    }\r\n      let fechaInicio = new Date(valorInicio);\r\n      let fechaFin = new Date(control.value);\r\n\r\n      let horaInicio = fechaInicio.getHours();\r\n      let horaFin = fechaFin.getHours();\r\n\r\n      let minInicio = fechaInicio.getMinutes();\r\n      let minFin = fechaFin.getMinutes();\r\n\r\n    if (tipo == 'f') {\r\n        if (fechaInicio > fechaFin ) {\r\n            return  { 'error': {'message': 'Fecha fin debe de ser mayor a decha inicio'} }\r\n        }\r\n    }\r\n\r\n    if (tipo == 'h') {\r\n      if ((horaInicio == horaFin && minInicio == minFin) ||\r\n          (horaFin <  horaInicio ) ||\r\n          (horaInicio == horaFin &&  minFin < minInicio )\r\n          ) {\r\n        return  { 'error': {'message': 'Hora Fin mayor a hora inicio'} }\r\n        }\r\n    }\r\n    return null;\r\n  };\r\n}, 'error');\r\n\r\n","import { Component, Input, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'input-invalido',\r\n  templateUrl: './input-invalido.component.html',\r\n  styleUrls: ['./input-invalido.component.scss'],\r\n\r\n})\r\nexport class InputInvalidoComponent implements OnInit {\r\n  @Input() nombreControlError: string = \" \";\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"p-invalid\">\r\n  <arv-validation-messages for=\"{{nombreControlError}}\"></arv-validation-messages>\r\n</div>\r\n","import { NgModule } from \"@angular/core\";\r\nimport { ReactiveValidationModule } from \"angular-reactive-validation\";\r\nimport { FooterComponent } from \"./footer/footer.component\";\r\nimport { InputInvalidoComponent } from \"./input-invalido/input-invalido.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputInvalidoComponent,\r\n    FooterComponent\r\n  ],\r\n  exports:[\r\n    InputInvalidoComponent,\r\n    FooterComponent\r\n  ],\r\n  imports: [\r\n    ReactiveValidationModule\r\n  ],\r\n  providers: []\r\n})\r\nexport class SharedModule { }\r\n"],"sourceRoot":"webpack:///"}